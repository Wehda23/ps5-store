{
    "swagger": "2.0",
    "info": {
        "title": "PlayStation 5 E-commerce API",
        "description": "API documentation for the PlayStation 5 e-commerce website",
        "version": "1.0.0"
    },
    "basePath": "/api",
    "schemes": ["http"],
    "tags": [
        {
            "name": "Users",
            "description": "Operations related to user management"
        },
        {
            "name": "Products",
            "description": "Operations related to product management"
        },
        {
            "name": "Shipping Addresses",
            "description": "Endpoints related to shipping addresses"
        }
    ],
    "securityDefinitions": {
        "Bearer": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "description": "Enter 'Bearer' [space] and then your token in the text input below.\n\nExample: 'Bearer abcdef12345'"
        }
    },
    "paths": {
        "/users/register": {
            "post": {
                "tags": ["Users"],
                "summary": "Register a new user",
                "description": "Handles the registration of new users by validating the provided data and creating a new user account.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User object that needs to be registered",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": ["first_name", "last_name", "email", "password"],
                            "properties": {
                                "first_name": { "type": "string" },
                                "last_name": { "type": "string" },
                                "email": { "type": "string" },
                                "password": { "type": "string" }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful Registration",
                        "schema": { "type": "string" }
                    },
                    "403": {
                        "description": "Validation error",
                        "schema": {
                            "type": "array",
                            "items": { "type": "string" }
                        }
                    },
                    "409": {
                        "description": "Email already registered",
                        "schema": { "type": "string" }
                    },
                    "400": {
                        "description": "Registration Failed",
                        "schema": { "type": "string" }
                    }
                }
            }
        },
        "/users/login": {
            "post": {
                "tags": ["Users"],
                "summary": "Login user",
                "description": "Authenticates the user using provided credentials and returns JWT tokens if the login is successful.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User credentials",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": ["email", "password"],
                            "properties": {
                                "email": { "type": "string" },
                                "password": { "type": "string" }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Login successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": { "type": "integer", "format": "int64" },
                                "email": { "type": "string" },
                                "first_name": { "type": "string" },
                                "last_name": { "type": "string" },
                                "token": {
                                    "type": "object",
                                    "properties": {
                                        "access": { "type": "string" },
                                        "refresh": { "type": "string" }
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Validation error or login failed",
                        "schema": { "type": "string" }
                    }
                }
            }
        },
        "/users/update/{pk}": {
            "put": {
                "tags": ["Users"],
                "summary": "Update user information",
                "description": "Allows authenticated users to update their profile information.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "pk",
                        "type": "integer",
                        "required": true,
                        "description": "User ID"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "User object that needs to be updated",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": ["first_name", "last_name", "email"],
                            "properties": {
                                "first_name": { "type": "string" },
                                "last_name": { "type": "string" },
                                "email": { "type": "string" }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "id": { "type": "integer", "format": "int64" },
                                "first_name": { "type": "string" },
                                "last_name": { "type": "string" },
                                "email": { "type": "string" }
                            }
                        }
                    },
                    "404": {
                        "description": "Validation error or update failed",
                        "schema": { "type": "string" }
                    }
                },
                "security": [{ "Bearer": [] }]
            }
        },
        "/users/refresh": {
            "post": {
                "tags": ["Users"],
                "summary": "Refresh tokens",
                "description": "Generates new access and refresh tokens for authenticated users by blacklisting the current tokens.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Current tokens",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": ["access", "refresh"],
                            "properties": {
                                "access": { "type": "string" },
                                "refresh": { "type": "string" }
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Tokens refreshed successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "access": { "type": "string" },
                                "refresh": { "type": "string" }
                            }
                        }
                    },
                    "404": {
                        "description": "Validation error or token refresh failed",
                        "schema": { "type": "string" }
                    }
                },
                "security": [{ "Bearer": [] }]
            }
        },
        "/users/logout": {
            "post": {
                "tags": ["Users"],
                "summary": "Logout user",
                "description": "Logs out the authenticated user by blacklisting the current access and refresh tokens.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Current tokens",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "required": ["access", "refresh"],
                            "properties": {
                                "access": { "type": "string" },
                                "refresh": { "type": "string" }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": { "type": "string" }
                            }
                        }
                    },
                    "404": {
                        "description": "Validation error or logout failed",
                        "schema": { "type": "string" }
                    }
                },
                "security": [{ "Bearer": [] }]
            }
        },
        "/products/categories": {
            "get": {
                "tags": ["Products"],
                "summary": "Get all product categories",
                "description": "Retrieves all product categories available.",
                "responses": {
                    "200": {
                        "description": "Categories retrieved successfully",
                        "schema": {
                            "type": "array",
                            "items": { "type": "string" }
                        }
                    },
                    "404": {
                        "description": "No categories found",
                        "schema": { "type": "string" }
                    }
                }
            }
        },
        "/products/category": {
            "post": {
                "tags": ["Products"],
                "summary": "Create a new product category",
                "description": "Endpoint to create a new product category with authentication and permission checks.",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Category object that needs to be created",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": { "type": "string" }
                            },
                            "example": {
                                "name": "Newcategoryname"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category created successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": { "type": "string" }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input data",
                        "schema": {
                            "type": "array",
                            "items": { "type": "string" }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication credentials missing or invalid",
                        "schema": { "type": "string" }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": { "type": "string" }
                    },
                    "404": {
                        "description": "Not Found - Endpoint not found",
                        "schema": { "type": "string" }
                    }
                },
                "security": [{ "Bearer": [] }]
            }
        },
        "/category/{category_id}": {
            "put": {
                "tags": ["Products"],
                "summary": "Update a product category",
                "description": "Endpoint to update a product category with authentication and permission checks.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "category_id",
                        "type": "integer",
                        "required": true,
                        "description": "Category ID"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Category object that needs to be updated",
                        "required": false,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": { "type": "string" },
                                "id": { "type": "integer" }
                            },
                            "example": {
                                "name": "UpdatedCategoryName",
                                "id": 1
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Category updated successfully",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": { "type": "string" },
                                "id": { "type": "integer" }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid input data",
                        "schema": {
                            "type": "array",
                            "items": { "type": "string" }
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication credentials missing or invalid",
                        "schema": { "type": "string" }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": { "type": "string" }
                    },
                    "404": {
                        "description": "Not Found - Category not found",
                        "schema": { "type": "string" }
                    }
                },
                "security": [{ "Bearer": [] }]
            },
            "delete": {
                "tags": ["Products"],
                "summary": "Delete a product category",
                "description": "Endpoint to delete a product category with authentication and permission checks.",
                "parameters": [
                    {
                        "in": "path",
                        "name": "category_id",
                        "type": "integer",
                        "required": true,
                        "description": "Category ID"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Category deleted successfully",
                        "schema": { "type": "string" }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication credentials missing or invalid",
                        "schema": { "type": "string" }
                    },
                    "403": {
                        "description": "Forbidden - Insufficient permissions",
                        "schema": { "type": "string" }
                    },
                    "404": {
                        "description": "Not Found - Category not found",
                        "schema": { "type": "string" }
                    }
                },
                "security": [{ "Bearer": [] }]
            }
        },
        "/products": {
            "post": {
                "tags": ["Products"],
                "summary": "Create a new product",
                "description": "Endpoint to create a new product with authentication and permission checks.",
                "parameters": [
                {
                    "in": "body",
                    "name": "body",
                    "description": "Product object that needs to be created",
                    "required": true,
                    "schema": {
                    "type": "object",
                    "properties": {
                        "image": {
                        "type": "string",
                        "format": "binary",
                        "description": "Image file"
                        },
                        "name": {
                        "type": "string",
                        "description": "Product name"
                        },
                        "price": {
                        "type": "number",
                        "format": "float",
                        "description": "Price of the product"
                        },
                        "description": {
                        "type": "string",
                        "description": "Product description"
                        },
                        "stock": {
                        "type": "integer",
                        "description": "Quantity of the product available"
                        },
                        "category_id": {
                        "type": "integer",
                        "description": "Category ID"
                        }
                    },
                    "example": {
                        "name": "NewProduct",
                        "price": 100.0,
                        "description": "Product description",
                        "stock": 50,
                        "category_id": 1
                    }
                    }
                }
                ],
                "responses": {
                "201": {
                    "description": "Product created successfully",
                    "schema": {
                    "type": "string",
                    "example": "Product created successfully"
                    }
                },
                "400": {
                    "description": "Bad Request - Invalid input data",
                    "schema": {
                    "type": "array",
                    "items": { "type": "string" }
                    }
                },
                "401": {
                    "description": "Unauthorized - Authentication credentials missing or invalid",
                    "schema": { "type": "string" }
                },
                "403": {
                    "description": "Forbidden - Insufficient permissions",
                    "schema": { "type": "string" }
                },
                "415": {
                    "description": "Unsupported Media Type - Allowed media types are 'application/json' or 'multipart/form-data'",
                    "schema": { "type": "string" }
                }
                },
                "security": [{ "Bearer": [] }]
            },
        "get": {
            "tags": ["Products"],
        "summary": "Get All Products",
        "operationId": "getAllProducts",
        "parameters": [
            {
            "name": "category",
            "in": "query",
            "description": "Filter products by category",
            "schema": {
                "type": "string"
            }
            },
            {
            "name": "search",
            "in": "query",
            "description": "Search products by name or description",
            "schema": {
                "type": "string"
            }
            },
            {
            "name": "sort_by",
            "in": "query",
            "description": "Sort products by specified field (e.g., price, name)",
            "schema": {
                "type": "string"
            }
            },
            {
            "name": "start",
            "in": "query",
            "description": "Specify the page number for pagination",
            "schema": {
                "type": "integer"
            }
            },
            {
            "name": "products",
            "in": "query",
            "description": "Specify the number of products per page for pagination",
            "schema": {
                "type": "integer"
            }
            },
            {
            "name": "low_price",
            "in": "query",
            "description": "Specify the lowest price for a product",
            "schema": {
                "type": "integer"
            }
            },
            {
            "name": "high_price",
            "in": "query",
            "description": "Specify the highest price for a product",
            "schema": {
                "type": "integer"
            }
            },
            {
            "name": "sale",
            "in": "query",
            "description": "Specify if the product is on sale",
            "schema": {
                "type": "boolean"
            }
            }
        ],
        "responses": {
            "200": {
            "description": "A list of all products",
            "content": {
                "application/json": {
                "schema": {
                    "type": "array",
                    "items": {
                    "type": "object",
                    "properties": {
                        "category": {
                        "type": "object",
                        "properties": {
                            "id": {
                            "type": "integer"
                            },
                            "name": {
                            "type": "string"
                            }
                        }
                        },
                        "description": {
                        "type": "string"
                        },
                        "discount": {
                        "type": "number"
                        },
                        "id": {
                        "type": "integer"
                        },
                        "image_url": {
                        "type": "string"
                        },
                        "is_sale": {
                        "type": "boolean"
                        },
                        "name": {
                        "type": "string"
                        },
                        "price": {
                        "type": "number"
                        },
                        "stock": {
                        "type": "integer"
                        }
                    }
                    }
                }
                }
            }
            },
            "404": {
            "description": "No products found"
            },
            "403": {
            "description": "Forbidden Request"
            },
            "500": {
            "description": "Failed to retrieve products"
            }
        }
        }
        },
        "/products/{product_id}": {
            "get": {
                "tags": ["Products"],
                "summary": "Get a product by ID",
                "description": "Endpoint to retrieve a product by its ID.",
                "parameters": [
                {
                    "in": "path",
                    "name": "product_id",
                    "type": "integer",
                    "required": true,
                    "description": "Product ID"
                }
                ],
                "responses": {
                "200": {
                    "description": "Product retrieved successfully",
                    "schema": {
                    "type": "object",
                    "properties": {
                        "category": {
                        "type": "object",
                        "properties": {
                            "id": { "type": "integer" },
                            "name": { "type": "string" }
                        }
                        },
                        "description": { "type": "string" },
                        "id": { "type": "integer" },
                        "image_url": { "type": "string" },
                        "name": { "type": "string" },
                        "price": { "type": "number", "format": "float" },
                        "stock": { "type": "integer" }
                    },
                    "example": {
                        "category": {
                        "id": 1,
                        "name": "Play Station"
                        },
                        "description": "Gaming Console",
                        "id": 1,
                        "image_url": "static\\images\\Waheed Khaled\\82209737.jpg",
                        "name": "Play Station 5",
                        "price": 499.99,
                        "stock": 99
                    }
                    }
                },
                "400": {
                    "description": "Bad Request - Invalid input data",
                    "schema": {
                    "type": "array",
                    "items": { "type": "string" }
                    }
                },
                "404": {
                    "description": "Not Found - Product not found",
                    "schema": { "type": "string" }
                }
                }
            },
            "put": {
                "tags": ["Products"],
                "summary": "Update a product",
                "description": "Endpoint to update a product with authentication and permission checks.",
                "parameters": [
                    {
                    "in": "path",
                    "name": "product_id",
                    "type": "integer",
                    "required": true,
                    "description": "Product ID"
                    },
                    {
                    "in": "body",
                    "name": "body",
                    "description": "Product object that needs to be updated",
                    "required": true,
                    "schema": {
                        "type": "object",
                        "properties": {
                        "image": {
                            "type": "string",
                            "format": "binary",
                            "description": "Image file"
                        },
                        "name": {
                            "type": "string",
                            "description": "Product name"
                        },
                        "price": {
                            "type": "number",
                            "format": "float",
                            "description": "Price of the product"
                        },
                        "description": {
                            "type": "string",
                            "description": "Product description"
                        },
                        "stock": {
                            "type": "integer",
                            "description": "Quantity of the product available"
                        },
                        "category_id": {
                            "type": "integer",
                            "description": "Category ID"
                        }
                        },
                        "example": {
                        "name": "Updated Product Name",
                        "price": 150.0,
                        "description": "Updated product description",
                        "stock": 30,
                        "category_id": 2
                        }
                    }
                    }
                ],
                "responses": {
                    "200": {
                    "description": "Product updated successfully",
                    "schema": {
                        "type": "string",
                        "example": "Product updated successfully"
                    }
                    },
                    "400": {
                    "description": "Bad Request - Invalid input data",
                    "schema": {
                        "type": "array",
                        "items": { "type": "string" }
                    }
                    },
                    "401": {
                    "description": "Unauthorized - Authentication credentials missing or invalid",
                    "schema": { "type": "string" }
                    },
                    "403": {
                    "description": "Forbidden - Insufficient permissions",
                    "schema": { "type": "string" }
                    },
                    "404": {
                    "description": "Not Found - Product not found",
                    "schema": { "type": "string" }
                    },
                    "415": {
                    "description": "Unsupported Media Type - Allowed media types are 'application/json' or 'multipart/form-data'",
                    "schema": { "type": "string" }
                    }
                },
                "security": [{ "Bearer": [] }]
            },
            "delete": {
                "tags": ["Products"],
                "summary": "Delete a product",
                "description": "Endpoint to delete a product with authentication and permission checks.",
                "parameters": [
                    {
                    "in": "path",
                    "name": "product_id",
                    "type": "integer",
                    "required": true,
                    "description": "Product ID"
                    }
                ],
                "responses": {
                    "200": {
                    "description": "Product deleted successfully",
                    "schema": {
                        "type": "string",
                        "example": "Product Deleted"
                    }
                    },
                    "400": {
                    "description": "Bad Request - Invalid input data",
                    "schema": {
                        "type": "array",
                        "items": { "type": "string" }
                    }
                    },
                    "401": {
                    "description": "Unauthorized - Authentication credentials missing or invalid",
                    "schema": { "type": "string" }
                    },
                    "403": {
                    "description": "Forbidden - Insufficient permissions",
                    "schema": { "type": "string" }
                    },
                    "404": {
                    "description": "Not Found - Product not found",
                    "schema": { "type": "string" }
                    }
                },
                "security": [{ "Bearer": [] }]
            }
        },
        "/shipping-addresses/": {
            "get": {
                "tags": ["Shipping Addresses"],
                "summary": "Retrieve User's Shipping Addresses",
                "description": "Retrieve a user's shipping addresses.",
                "operationId": "getShippingAddresses",
                "security": [
                {
                    "bearerAuth": []
                }
                ],
                "responses": {
                "200": {
                    "description": "User's shipping addresses retrieved successfully",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                            "address": {
                                "type": "string",
                                "example": "Maadi, Street 9"
                            },
                            "city": {
                                "type": "string",
                                "example": "Cairo"
                            },
                            "country": {
                                "type": "string",
                                "example": "Egypt"
                            },
                            "default": {
                                "type": "boolean",
                                "example": true
                            },
                            "id": {
                                "type": "integer",
                                "example": 1
                            },
                            "state": {
                                "type": "string",
                                "example": "N/A"
                            },
                            "user": {
                                "type": "integer",
                                "example": 1
                            },
                            "user_id": {
                                "type": "integer",
                                "example": 1
                            }
                            }
                        }
                        }
                    }
                    }
                },
                "401": {
                    "description": "Unauthorized - User is not authenticated",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "string",
                        "example": "User not assigned"
                        }
                    }
                    }
                },
                "500": {
                    "description": "Internal Server Error - An error occurred while retrieving addresses",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "string",
                        "example": "Something went wrong"
                        }
                    }
                    }
                }
                }
            },
            "post": {
                "tags": ["Shipping Addresses"],
                "summary": "Create Shipping Address",
                "description": "Create a new shipping address.",
                "operationId": "createShippingAddress",
                "security": [
                {
                    "bearerAuth": []
                }
                ],
                "requestBody": {
                "required": true,
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                        "city": {
                            "type": "string",
                            "example": "Madinate Nasr"
                        },
                        "address": {
                            "type": "string",
                            "example": "17 Omar Ahmed Street"
                        },
                        "country": {
                            "type": "string",
                            "example": "Egypt"
                        },
                        "default": {
                            "type": "boolean",
                            "example": true,
                            "description": "Optional Field"
                        },
                        "state": {
                            "type": "string",
                            "example": "N/A",
                            "description": "Optional Field"
                        }
                        },
                        "required": ["city", "address", "country"]
                    }
                    }
                }
                },
                "responses": {
                "201": {
                    "description": "Shipping address created successfully",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "string",
                        "example": "Shipping address created successfully"
                        }
                    }
                    }
                },
                "400": {
                    "description": "Bad Request - Invalid input data",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "example": [{"field": "error message"}]
                        }
                        }
                    }
                    }
                },
                "401": {
                    "description": "Unauthorized - User is not authenticated",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "string",
                        "example": "User not assigned"
                        }
                    }
                    }
                },
                "500": {
                    "description": "Internal Server Error - An error occurred while creating the address",
                    "content": {
                    "application/json": {
                        "schema": {
                        "type": "string",
                        "example": "Something went wrong"
                        }
                    }
                    }
                }
                }
            }
        },
        "/shipping-addresses/{address_id}": {
            "put": {
            "tags": ["Shipping Addresses"],
            "summary": "Update Shipping Address",
            "description": "Update a shipping address.",
            "operationId": "updateShippingAddress",
            "security": [
                {
                "bearerAuth": []
                }
            ],
            "parameters": [
                {
                "name": "address_id",
                "in": "path",
                "required": true,
                "schema": {
                    "type": "integer"
                },
                "description": "The ID of the address to update."
                }
            ],
            "requestBody": {
                "required": true,
                "content": {
                "application/json": {
                    "schema": {
                    "type": "object",
                    "properties": {
                        "address": {
                        "type": "string",
                        "example": "Maadi, Streetddddd 9"
                        },
                        "country": {
                        "type": "string",
                        "example": "Egypt"
                        },
                        "state": {
                        "type": "string",
                        "example": "N/A"
                        },
                        "default": {
                        "type": "boolean",
                        "example": true
                        },
                        "city": {
                        "type": "string",
                        "example": "Cairo"
                        }
                    },
                    "required": ["address", "country", "state", "default", "city"]
                    }
                }
                }
            },
            "responses": {
                "200": {
                "description": "Shipping address updated successfully",
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "object",
                        "properties": {
                        "address": {
                            "type": "string",
                            "example": "Maadi, Streetddddd 9"
                        },
                        "country": {
                            "type": "string",
                            "example": "Egypt"
                        },
                        "state": {
                            "type": "string",
                            "example": "N/A"
                        },
                        "default": {
                            "type": "boolean",
                            "example": true
                        },
                        "city": {
                            "type": "string",
                            "example": "Cairo"
                        }
                        }
                    }
                    }
                }
                },
                "400": {
                "description": "Bad Request - Invalid input data",
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "array",
                        "items": {
                        "type": "object",
                        "example": [{"field": "error message"}]
                        }
                    }
                    }
                }
                },
                "401": {
                "description": "Unauthorized - User is not authenticated",
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "string",
                        "example": "User not assigned"
                    }
                    }
                }
                },
                "403": {
                "description": "Forbidden - User does not have the required permissions",
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "string",
                        "example": "Forbidden"
                    }
                    }
                }
                },
                "404": {
                "description": "Not Found - Address not found",
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "string",
                        "example": "Address not found"
                    }
                    }
                }
                },
                "500": {
                "description": "Internal Server Error - An error occurred while updating the address",
                "content": {
                    "application/json": {
                    "schema": {
                        "type": "string",
                        "example": "Something went wrong"
                    }
                    }
                }
                }
            }
            },
            "delete": {
                "tags": ["Shipping Addresses"],
                "summary": "Delete Shipping Address",
                "description": "Delete a shipping address.",
                "operationId": "deleteShippingAddress",
                "security": [
                    {
                    "bearerAuth": []
                    }
                ],
                "parameters": [
                    {
                    "name": "address_id",
                    "in": "path",
                    "required": true,
                    "schema": {
                        "type": "integer"
                    },
                    "description": "The ID of the address to delete."
                    }
                ],
                "responses": {
                    "200": {
                    "description": "Shipping address deleted successfully",
                    "content": {
                        "application/json": {
                        "schema": {
                            "type": "string",
                            "example": "Shipping address deleted successfully"
                        }
                        }
                    }
                    },
                    "401": {
                    "description": "Unauthorized - User is not authenticated",
                    "content": {
                        "application/json": {
                        "schema": {
                            "type": "string",
                            "example": "User not assigned"
                        }
                        }
                    }
                    },
                    "403": {
                    "description": "Forbidden - User does not have the required permissions",
                    "content": {
                        "application/json": {
                        "schema": {
                            "type": "string",
                            "example": "Forbidden"
                        }
                        }
                    }
                    },
                    "404": {
                    "description": "Not Found - Address not found",
                    "content": {
                        "application/json": {
                        "schema": {
                            "type": "string",
                            "example": "Address not found"
                        }
                        }
                    }
                    },
                    "500": {
                    "description": "Internal Server Error - An error occurred while deleting the address",
                    "content": {
                        "application/json": {
                        "schema": {
                            "type": "string",
                            "example": "Something went wrong"
                        }
                        }
                    }
                    }
                }
            }
        }

    }
}
